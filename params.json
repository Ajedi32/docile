{"tagline":"Docile keeps your Ruby DSL's tame and well-behaved","body":"# Docile\r\n\r\nDefinition: *Ready to accept control or instruction; submissive* [[1]]\r\n\r\nTired of overly complex DSL libraries and hairy meta-programming?\r\n\r\nLet's make our Ruby DSLs more docile...\r\n\r\n[1]: http://www.google.com/search?q=docile+definition   \"Google\"\r\n\r\n## Usage\r\n\r\nLet's treat an Array's methods as its own DSL:\r\n\r\n``` ruby\r\nDocile.dsl_eval([]) do\r\n  push 1\r\n  push 2\r\n  pop\r\n  push 3\r\nend\r\n#=> [1, 3]\r\n```\r\n\r\nMutating (changing) the array is fine, but what you probably really want as your DSL is actually a [Builder Pattern][2].\r\n\r\nFor example, if you have a PizzaBuilder class that can already build a Pizza:\r\n\r\n``` ruby\r\n@sauce_level = :extra\r\npizza = PizzaBuilder.new.cheese.pepperoni.sauce(@sauce_level).build\r\n#=> #<Pizza:0x00001009dc398 @cheese=true, @pepperoni=true, @bacon=false, @sauce=:extra>\r\n```\r\n\r\nThen you can use this same PizzaBuilder class as a DSL:\r\n\r\n``` ruby\r\n@sauce_level = :extra\r\npizza = Docile.dsl_eval(PizzaBuilder.new) do\r\n  cheese\r\n  pepperoni\r\n  sauce @sauce_level\r\nend.build\r\n#=> #<Pizza:0x00001009dc398 @cheese=true, @pepperoni=true, @bacon=false, @sauce=:extra>\r\n```\r\n\r\nIt's just that easy!\r\n\r\n[2]: http://stackoverflow.com/questions/328496/when-would-you-use-the-builder-pattern  \"Builder Pattern\"\r\n\r\n## Features\r\n\r\n  1.  method lookup falls back from the DSL object to the block's context\r\n  2.  local variable lookup falls back from the DSL object to the block's context\r\n  3.  instance variables are from the block's context only\r\n  4.  nested dsl evaluation\r\n\r\n## Installation\r\n\r\n``` bash\r\n$ gem install docile\r\n```\r\n\r\n## Documentation\r\n\r\nDocumentation hosted on *rubydoc.info*: [Docile Documentation](http://rubydoc.info/gems/docile)\r\nOr, read the code hosted on *github.com*: [Docile Code](https://github.com/ms-ati/docile)\r\n\r\n## Note on Patches/Pull Requests\r\n\r\n  * Fork the project.\r\n  * Setup your development environment with: gem install bundler; bundle install\r\n  * Make your feature addition or bug fix.\r\n  * Add tests for it. This is important so I don't break it in a\r\n    future version unintentionally.\r\n  * Commit, do not mess with rakefile, version, or history.\r\n    (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n  * Send me a pull request. Bonus points for topic branches.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2011 Marc Siegel. See LICENSE for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Docile"}